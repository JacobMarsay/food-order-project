{"ast":null,"code":"var _jsxFileName = \"/Users/jacobmarsay/Documents/react course 2/food order app/01-starting-project/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport CardContext from \"./cart-context\";\n\n// A card provider component to manage the card context data and to provide context to all components that needs access to the 'CardConext' component\n// Reducer has been chosen to manage this state because this state is more complex\n// Check if meal is part of a cart or not, etc.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.payload.price * action.payload.amount;\n\n    // CHECKING FOR AN EXISTING ITEM\n    // finding if the item id in the array is the same as the id that has just been added\n    const exitstingCartItemIndex = state.items.findIndex(item => item.id === action.payload.id);\n    // GETS THE ITEM THAT ALREADY EXISTS BY ACCESSING THE ARRAY INDEX\n    const existingCartItem = state.items[exitstingCartItemIndex];\n    let updatedItems;\n\n    // CHECK IF 'existingCartItem' IS PART OF THE ARRAY\n    // IF TRUE\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.payload.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[exitstingCartItemIndex] = updatedItem;\n    } else {\n      //'concat()' RETURN A NEW ARRAY RATHER THAN ADDING IT TO THE 'items' array\n      updatedItems = state.items.concat(action.payload);\n    }\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    const existingItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingItemIndex];\n    // SUBTRACT THE ITEM PRICE FROM THE TOTAL AMOUNT\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n    // REMOVING THE ITEM WHEN THE AMOUNT IS 1\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      // SUBTRACT THE AMOUNT BY 1\n      const updatedItem = {\n        ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n      console.log(updatedItems);\n    }\n    return {\n      items: updatedItems,\n      amount: updatedTotalAmount\n    };\n  }\n  return defaultCartState;\n};\nfunction CartProvider(props) {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  // LOGIC\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      payload: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CardContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CardContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","payload","price","amount","exitstingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","concat","existingItemIndex","existingItem","filter","console","log","CartProvider","props","cartState","dispatchCartAction","addItemCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"sources":["/Users/jacobmarsay/Documents/react course 2/food order app/01-starting-project/src/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from \"react\";\nimport CardContext from \"./cart-context\";\n\n// A card provider component to manage the card context data and to provide context to all components that needs access to the 'CardConext' component\n// Reducer has been chosen to manage this state because this state is more complex\n// Check if meal is part of a cart or not, etc.\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount =\n      state.totalAmount + action.payload.price * action.payload.amount;\n\n    // CHECKING FOR AN EXISTING ITEM\n    // finding if the item id in the array is the same as the id that has just been added\n    const exitstingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.payload.id\n    );\n    // GETS THE ITEM THAT ALREADY EXISTS BY ACCESSING THE ARRAY INDEX\n    const existingCartItem = state.items[exitstingCartItemIndex];\n    let updatedItems;\n\n    // CHECK IF 'existingCartItem' IS PART OF THE ARRAY\n    // IF TRUE\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.payload.amount,\n      };\n      updatedItems = [...state.items];\n      updatedItems[exitstingCartItemIndex] = updatedItem;\n    } else {\n      //'concat()' RETURN A NEW ARRAY RATHER THAN ADDING IT TO THE 'items' array\n      updatedItems = state.items.concat(action.payload);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    const existingItemIndex = state.items.findIndex(\n      (item) => item.id === action.id\n    );\n\n    const existingItem = state.items[existingItemIndex];\n    // SUBTRACT THE ITEM PRICE FROM THE TOTAL AMOUNT\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n    // REMOVING THE ITEM WHEN THE AMOUNT IS 1\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter((item) => item.id !== action.id);\n    } else {\n      // SUBTRACT THE AMOUNT BY 1\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = updatedItem;\n      console.log(updatedItems);\n    }\n    return {\n      items: updatedItems,\n      amount: updatedTotalAmount,\n    };\n  }\n  return defaultCartState;\n};\n\nfunction CartProvider(props) {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  // LOGIC\n  const addItemCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", payload: item });\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CardContext.Provider value={cartContext}>\n      {props.children}\n    </CardContext.Provider>\n  );\n}\n\nexport default CartProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
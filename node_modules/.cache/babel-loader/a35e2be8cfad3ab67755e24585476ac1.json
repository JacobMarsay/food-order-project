{"ast":null,"code":"var _jsxFileName = \"/Users/jacobmarsay/Documents/react course 2/food order app/01-starting-project/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport CardContext from \"./cart-context\";\n\n// A card provider component to manage the card context data and to provide context to all components that needs access to the 'CardConext' component\n// Reducer has been chosen to manage this state because this state is more complex\n// Check if meal is part of a cart or not, etc.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //'concat()' RETURN A NEW ARRAY RATHER THAN ADDING IT TO THE 'items' array\n    const updatedItems = state.items.concat(action.payload);\n    // CHECKING FOR AN EXISTING ITEM\n    // finding if the item id in the array is the same as the id that has just been added\n    const exitstingCartItemIndex = state.items.findIndex(item => action.item.id);\n    const updatedTotalAmount = state.totalAmount + action.payload.price * action.payload.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  return defaultCartState;\n};\nfunction CartProvider(props) {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  // LOGIC\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      payload: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CardContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CardContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","payload","exitstingCartItemIndex","findIndex","item","id","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"sources":["/Users/jacobmarsay/Documents/react course 2/food order app/01-starting-project/src/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from \"react\";\nimport CardContext from \"./cart-context\";\n\n// A card provider component to manage the card context data and to provide context to all components that needs access to the 'CardConext' component\n// Reducer has been chosen to manage this state because this state is more complex\n// Check if meal is part of a cart or not, etc.\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //'concat()' RETURN A NEW ARRAY RATHER THAN ADDING IT TO THE 'items' array\n    const updatedItems = state.items.concat(action.payload);\n    // CHECKING FOR AN EXISTING ITEM\n    // finding if the item id in the array is the same as the id that has just been added\n    const exitstingCartItemIndex = state.items.findIndex(\n      (item) => action.item.id\n    );\n    const updatedTotalAmount =\n      state.totalAmount + action.payload.price * action.payload.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n  return defaultCartState;\n};\n\nfunction CartProvider(props) {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  // LOGIC\n  const addItemCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", payload: item });\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CardContext.Provider value={cartContext}>\n      {props.children}\n    </CardContext.Provider>\n  );\n}\n\nexport default CartProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AACA;AACA;AAAA;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACzB;IACA,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAK,CAACO,MAAM,CAACH,MAAM,CAACI,OAAO,CAAC;IACvD;IACA;IACA,MAAMC,sBAAsB,GAAGN,KAAK,CAACH,KAAK,CAACU,SAAS,CACjDC,IAAI,IAAKP,MAAM,CAACO,IAAI,CAACC,EAAE,CACzB;IACD,MAAMC,kBAAkB,GACtBV,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACI,OAAO,CAACM,KAAK,GAAGV,MAAM,CAACI,OAAO,CAACO,MAAM;IAClE,OAAO;MACLf,KAAK,EAAEM,YAAY;MACnBL,WAAW,EAAEY;IACf,CAAC;EACH;EACA,OAAOd,gBAAgB;AACzB,CAAC;AAED,SAASiB,YAAY,CAACC,KAAK,EAAE;EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGtB,UAAU,CAChDK,WAAW,EACXH,gBAAgB,CACjB;EACD;EACA,MAAMqB,kBAAkB,GAAIT,IAAI,IAAK;IACnCQ,kBAAkB,CAAC;MAAEd,IAAI,EAAE,KAAK;MAAEG,OAAO,EAAEG;IAAK,CAAC,CAAC;EACpD,CAAC;EACD,MAAMU,yBAAyB,GAAIT,EAAE,IAAK;IACxCO,kBAAkB,CAAC;MAAEd,IAAI,EAAE,QAAQ;MAAEO,EAAE,EAAEA;IAAG,CAAC,CAAC;EAChD,CAAC;EAED,MAAMU,WAAW,GAAG;IAClBtB,KAAK,EAAEkB,SAAS,CAAClB,KAAK;IACtBC,WAAW,EAAEiB,SAAS,CAACjB,WAAW;IAClCsB,OAAO,EAAEH,kBAAkB;IAC3BI,UAAU,EAAEH;EACd,CAAC;EACD,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEC,WAAY;IAAA,UACtCL,KAAK,CAACQ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B;AAAC,GAxBQT,YAAY;AAAA,KAAZA,YAAY;AA0BrB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module"}